package ctc_office;

import javax.swing.JFrame;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.SpringLayout;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

import javax.swing.JLabel;

import java.awt.Color;

import javax.swing.ScrollPaneConstants;

import java.awt.BorderLayout;

import javax.swing.border.EmptyBorder;

import java.awt.FlowLayout;

import javax.swing.JComboBox;
import javax.swing.border.EtchedBorder;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JSlider;
import javax.swing.JTextField;

import java.awt.CardLayout;

import javax.swing.JButton;

import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class CTCGUI extends JFrame{
	private JTable trainTable;
	private JTable trackTable;
	private DefaultTableModel trainTableModel;
	private DefaultTableModel trackTableModel;
	private final HashMap<String, TrackLayout> trackLayouts = CTCWrapper.ctcOffice.getAllTrackLayouts();
	private ArrayList<Train> allTrains = null;;
	private ArrayList<BlockInterface> allBlocks = null;;
	private String currLine = "Green";
	private JPanel trackInfoPanel;
	private JPanel trackTablePanel;
	private JPanel trainTablePanel;
	private JPanel trackLayoutPanel;
	private JTextField destinationTextBox;
	private JTextField speedTextBox;
	private JTextField authTextBox;
	private JTextField trainNameTextBox;
	
	public CTCGUI() {
		setResizable(false);

        String[] lines = {"Green", "Red"};
		// begin autogenerated code
		SpringLayout springLayout = new SpringLayout();
		getContentPane().setLayout(springLayout);
		
		trainTablePanel = new JPanel();
		trainTablePanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		springLayout.putConstraint(SpringLayout.NORTH, trainTablePanel, 0, SpringLayout.NORTH, getContentPane());
		springLayout.putConstraint(SpringLayout.WEST, trainTablePanel, 0, SpringLayout.WEST, getContentPane());
		springLayout.putConstraint(SpringLayout.SOUTH, trainTablePanel, 213, SpringLayout.NORTH, getContentPane());
		springLayout.putConstraint(SpringLayout.EAST, trainTablePanel, 661, SpringLayout.WEST, getContentPane());
		getContentPane().add(trainTablePanel);
		
		trackLayoutPanel = new JPanel();
		springLayout.putConstraint(SpringLayout.NORTH, trackLayoutPanel, 0, SpringLayout.SOUTH, trainTablePanel);
		springLayout.putConstraint(SpringLayout.WEST, trackLayoutPanel, 0, SpringLayout.WEST, getContentPane());
		springLayout.putConstraint(SpringLayout.SOUTH, trackLayoutPanel, -248, SpringLayout.SOUTH, getContentPane());
		springLayout.putConstraint(SpringLayout.EAST, trackLayoutPanel, 0, SpringLayout.EAST, trainTablePanel);
		trackLayoutPanel.setBorder(new EmptyBorder(0, 0, 0, 0));
		trackLayoutPanel.setBackground(Color.WHITE);
		getContentPane().add(trackLayoutPanel);
		trackLayoutPanel.setLayout(new CardLayout(0, 0));
		
		JLabel todoLable = new JLabel("TODO: the track layout will be displayed here in the form of a graph.");
		trackLayoutPanel.add(todoLable, "name_618311658298787");
		
		JScrollPane TrackLayoutScrollPane = new JScrollPane();
		trackLayoutPanel.add(TrackLayoutScrollPane, "name_618311680360271");
		
		trackTablePanel = new JPanel();
		springLayout.putConstraint(SpringLayout.NORTH, trackTablePanel, 0, SpringLayout.SOUTH, trackLayoutPanel);
		springLayout.putConstraint(SpringLayout.SOUTH, trackTablePanel, 0, SpringLayout.SOUTH, getContentPane());
		trackTablePanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		springLayout.putConstraint(SpringLayout.WEST, trackTablePanel, 0, SpringLayout.WEST, getContentPane());
		springLayout.putConstraint(SpringLayout.EAST, trackTablePanel, 0, SpringLayout.EAST, trainTablePanel);
		getContentPane().add(trackTablePanel);
		
		trackTable = new JTable();
		trackTable.setRowSelectionAllowed(false);
		trackTableModel = new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"Block Number", "Block Length", "Speed Limit (MPH)", "Block Type", "Occupied Status", "Broken"
				}
			) {
				Class[] columnTypes = new Class[] {
					String.class, String.class, String.class, String.class, String.class, String.class
				};
				public Class getColumnClass(int columnIndex) {
					return columnTypes[columnIndex];
				}
			};
		trackTable.setModel(trackTableModel);
		trackTable.getColumnModel().getColumn(2).setPreferredWidth(107);
		trackTablePanel.setLayout(new BorderLayout(0, 0));
		trackTablePanel.add(trackTable);
		
		JScrollPane trackTableScrollPane = new JScrollPane(trackTable);
		trackTableScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		trackTablePanel.add(trackTableScrollPane);
		
		trackInfoPanel = new JPanel();
		springLayout.putConstraint(SpringLayout.WEST, trackInfoPanel, 6, SpringLayout.EAST, trainTablePanel);
		springLayout.putConstraint(SpringLayout.SOUTH, trackInfoPanel, 0, SpringLayout.SOUTH, trackTablePanel);
		trackInfoPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		trainTable = new JTable();
		trainTable.setRowSelectionAllowed(false);
		trainTableModel = new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"Train Name", "Train ID", "Current Block", "Destination Block", "Speed(MPH)", "Authority (Yards)"
				}
			) {
				Class[] columnTypes = new Class[] {
					String.class, String.class, String.class, String.class, String.class, String.class
				};
				public Class getColumnClass(int columnIndex) {
					return columnTypes[columnIndex];
				}
			};
		trainTable.setModel(trainTableModel);
		trainTable.getColumnModel().getColumn(2).setPreferredWidth(107);
		trainTablePanel.setLayout(new CardLayout(0, 0));
		trainTablePanel.add(trainTable);
		
		JScrollPane trainTableScrollPane = new JScrollPane(trainTable);
		trainTablePanel.add(trainTableScrollPane, "name_662215814722478");
		getContentPane().add(trackInfoPanel);
		
		JPanel panel = new JPanel();
		springLayout.putConstraint(SpringLayout.NORTH, trackInfoPanel, 2, SpringLayout.SOUTH, panel);
		springLayout.putConstraint(SpringLayout.EAST, trackInfoPanel, 0, SpringLayout.EAST, panel);
		springLayout.putConstraint(SpringLayout.WEST, panel, 6, SpringLayout.EAST, trainTablePanel);
		trackInfoPanel.setLayout(null);
		
		
		springLayout.putConstraint(SpringLayout.SOUTH, panel, 60, SpringLayout.NORTH, getContentPane());
		springLayout.putConstraint(SpringLayout.NORTH, panel, 0, SpringLayout.NORTH, getContentPane());
		springLayout.putConstraint(SpringLayout.EAST, panel, 0, SpringLayout.EAST, getContentPane());
		panel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		getContentPane().add(panel);
		panel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		
		JLabel lblLine = new JLabel("Line");
		panel.add(lblLine);
		
		final JComboBox lineSelector = new JComboBox();
		lineSelector.setModel(new DefaultComboBoxModel(new String[] {"Green", "Red"}));
		panel.add(lineSelector);
		
		JLabel label = new JLabel("");
		panel.add(label);
		
		JLabel simTime = new JLabel("Simulation Time");
		panel.add(simTime);
		
		JSlider simTimeSlider = new JSlider();
		simTimeSlider.setForeground(Color.BLACK);
		simTimeSlider.setValue(1);
		simTimeSlider.setMinimum(1);
		panel.add(simTimeSlider);
		
		JLabel label_1 = new JLabel("");
		panel.add(label_1);
		
		JLabel label_2 = new JLabel("");
		panel.add(label_2);
		
		JLabel label_3 = new JLabel("");
		panel.add(label_3);
		// end autogenerated code

		// Refreshes the tables and layout
		final Timer timer = new Timer(100, new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent e) {
            	updateTrackTable();
            	updateTrainTable();
            	trackTablePanel.revalidate();
            	trackTablePanel.repaint();
            	trainTablePanel.revalidate();
            	trainTablePanel.repaint();
            	// if timer ticker changes
            	// timer.setDelay(2);
            }
        });
        timer.start();

        // Gets row of trackTable that was clicked
        trackTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = trackTable.rowAtPoint(evt.getPoint());
                int col = trackTable.columnAtPoint(evt.getPoint());
                if (row >= 0 && col >= 0) {
                    trackBlockSelected(allBlocks.get(row));
                }
            }
        });

        // Gets row of trainTable that was clicked
        trainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = trainTable.rowAtPoint(evt.getPoint());
                int col = trainTable.columnAtPoint(evt.getPoint());
                if (row >= 0 && col >= 0) {
                    trainSelected(allTrains.get(row));
                }
            }
        });
        
        // detect changes to the line
        lineSelector.addActionListener (new ActionListener () {
            public void actionPerformed(ActionEvent e) {
            	String selected = String.valueOf(lineSelector.getSelectedItem().toString());
            	if (!selected.equals(currLine)) {
            		currLine = selected;
                    //clear the info panel
            		trackInfoPanel.removeAll();
            		trackInfoPanel.revalidate();
            		trackInfoPanel.repaint();
            	}
            }
        });
	}
	private void updateTrackTable() {
    	TrackLayout tLayout = trackLayouts.get(currLine);
    	if (tLayout == null) {
    		return;
    	}
    	trackTableModel = new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"Block Number", "Block Length", "Speed Limit (MPH)", "Block Type", "Occupied Status", "Broken"
				}
			) {
				Class[] columnTypes = new Class[] {
					String.class, String.class, String.class, String.class, String.class, String.class
				};
				public Class getColumnClass(int columnIndex) {
					return columnTypes[columnIndex];
				}
			};

    	
    	// get the list of all the blocks
    	allBlocks = tLayout.getAllBlocks();
    	// Update the table with the new info
    	for (BlockInterface block : allBlocks) {
    		DefaultBlock b = (DefaultBlock) block;
    		String blockType;
    		String occupied = "Unoccopied";
    		if (b.occupied) {
    			occupied = "Occupied";
    		}
    		if (block.getClass().equals(DefaultBlock.class)) {
    			blockType = "Default";
    		}
    		else if (block.getClass().equals(RailwayCrossingBlock.class)){
    			blockType = "Railway Crossing";
	        }
	        else if (block.getClass().equals(SwitchBlock.class)){
    			blockType = "Switch";
	        }
            else if (block.getClass().equals(StationBlock.class)){
    			blockType = "Station";
            }
            else { // it is the yard
    			blockType = "Yard";
            }

    		trackTableModel.addRow(new Object[] {b.blockNumber, b.blockLength, b.speedLimit, blockType, occupied, b.broken});
    	}
    	trackTable.setModel(trackTableModel);
    	trackTable.repaint();
	}
	
	private void updateTrainTable() {
    	TrackLayout tLayout = trackLayouts.get(currLine);
    	if (tLayout == null) {
    		return;
    	}
    	trainTableModel.setRowCount(0);

    	// get the complete list of trains
    	allTrains = tLayout.getAllTrains();
    	// Update the table with the new info
    	if (allTrains == null) {
    		return;
    	}
    	for (Train t : allTrains) {
    		trainTableModel.addRow(new Object[] {t.trainName, t.trainId, t.currentBlock, t.destination, t.currSpeed, t.authority});
    	}
    	trainTable.setModel(trainTableModel);
    	trainTable.repaint();

	}
	
	private void trackBlockSelected(BlockInterface b) {
		// determine the block type
		if (b.getClass().equals(DefaultBlock.class)) {
			DefaultBlock block = (DefaultBlock) b;
		}
		else if (b.getClass().equals(RailwayCrossingBlock.class)){
			RailwayCrossingBlock block = (RailwayCrossingBlock) b;
        }
        else if (b.getClass().equals(SwitchBlock.class)){
        	SwitchBlock block = (SwitchBlock) b;
        }
        else if (b.getClass().equals(StationBlock.class)){
        	StationBlock block = (StationBlock) b;
        }
        else { // it is the yard
        	YardBlock block = (YardBlock) b;
        	JLabel trackInfoLabel = new JLabel("Block" + block.blockNumber);
    		trackInfoLabel.setBounds(172, 11, 65, 22);
    		trackInfoLabel.setFont(new Font("Tahoma", Font.BOLD, 18));
    		trackInfoPanel.add(trackInfoLabel);
    		
    		JLabel detailsLabel = new JLabel("Block type: Yard");
    		detailsLabel.setBounds(136, 46, 189, 14);
    		trackInfoPanel.add(detailsLabel);
    		
    		JButton dispatchTrainButton = new JButton("Dispatch Train");
    		dispatchTrainButton.addMouseListener(new MouseAdapter() {
    			@Override
    			public void mouseClicked(MouseEvent e) {
    				String trainName = trainNameTextBox.getText();
    				int destinationBlock = Integer.parseInt(destinationTextBox.getText());
    				int speed = Integer.parseInt(speedTextBox.getText());
    				int authority = Integer.parseInt(authTextBox.getText());
    				CTCWrapper.ctcOffice.manuallyDispatchNewTrain(currLine, trainName, destinationBlock, speed, authority);
    				trackInfoPanel.removeAll();
    				trackInfoPanel.revalidate();
    				trackInfoPanel.repaint();
    			}
    		});
    		dispatchTrainButton.setBounds(154, 627, 171, 23);
    		trackInfoPanel.add(dispatchTrainButton);

    		JLabel trainName = new JLabel("Train Name:");
    		trainName.setBounds(135, 480, 93, 14);
    		trackInfoPanel.add(trainName);
    		
    		JLabel destinationLabel = new JLabel("Destination Block:");
    		destinationLabel.setBounds(135, 506, 93, 14);
    		trackInfoPanel.add(destinationLabel);
    		
    		JLabel lblMaxSpeedmph = new JLabel("Max Speed (mph):");
    		lblMaxSpeedmph.setBounds(135, 532, 93, 14);
    		trackInfoPanel.add(lblMaxSpeedmph);
    		
    		JLabel lblAuthorityyards = new JLabel("Authority (yards):");
    		lblAuthorityyards.setBounds(135, 557, 93, 14);
    		trackInfoPanel.add(lblAuthorityyards);

    		trainNameTextBox = new JTextField();
    		trainNameTextBox.setBounds(239, 477, 86, 20);
    		trackInfoPanel.add(trainNameTextBox);
    		trainNameTextBox.setColumns(10);
    		
    		destinationTextBox = new JTextField();
    		destinationTextBox.setBounds(239, 503, 86, 20);
    		trackInfoPanel.add(destinationTextBox);
    		destinationTextBox.setColumns(10);
    		
    		speedTextBox = new JTextField();
    		speedTextBox.setBounds(239, 529, 86, 20);
    		trackInfoPanel.add(speedTextBox);
    		speedTextBox.setColumns(10);
    		
    		authTextBox = new JTextField();
    		authTextBox.setBounds(239, 554, 86, 20);
    		trackInfoPanel.add(authTextBox);
    		authTextBox.setColumns(10);
        }
		// display appropriate options for each block type
		trackInfoPanel.revalidate();
		trackInfoPanel.repaint();
	}
	
	private void trainSelected(Train t) {
		// If train is manually dispatched display button that allows for train routing
		
		JLabel trackInfoLabel = new JLabel(t.trainName.substring(1));
		trackInfoLabel.setBounds(172, 11, 65, 22);
		trackInfoLabel.setFont(new Font("Tahoma", Font.BOLD, 18));
		trackInfoPanel.add(trackInfoLabel);
		
		
		JButton dispatchTrainButton = new JButton("Route Train");
		dispatchTrainButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				String trainName = trainNameTextBox.getText();
				int destinationBlock = Integer.parseInt(destinationTextBox.getText());
				int speed = Integer.parseInt(speedTextBox.getText());
				int authority = Integer.parseInt(authTextBox.getText());
				CTCWrapper.ctcOffice.manuallyRouteTrain(currLine, trainName, destinationBlock, speed, authority);
				trackInfoPanel.removeAll();
				trackInfoPanel.revalidate();
				trackInfoPanel.repaint();
			}
		});
		dispatchTrainButton.setBounds(154, 627, 171, 23);
		trackInfoPanel.add(dispatchTrainButton);

		JLabel destinationLabel = new JLabel("Destination Block:");
		destinationLabel.setBounds(135, 506, 93, 14);
		trackInfoPanel.add(destinationLabel);
		
		JLabel lblMaxSpeedmph = new JLabel("Max Speed (mph):");
		lblMaxSpeedmph.setBounds(135, 532, 93, 14);
		trackInfoPanel.add(lblMaxSpeedmph);
		
		JLabel lblAuthorityyards = new JLabel("Authority (yards):");
		lblAuthorityyards.setBounds(135, 557, 93, 14);
		trackInfoPanel.add(lblAuthorityyards);
		
		destinationTextBox = new JTextField();
		destinationTextBox.setBounds(239, 503, 86, 20);
		trackInfoPanel.add(destinationTextBox);
		destinationTextBox.setColumns(10);
		
		speedTextBox = new JTextField();
		speedTextBox.setBounds(239, 529, 86, 20);
		trackInfoPanel.add(speedTextBox);
		speedTextBox.setColumns(10);
		
		authTextBox = new JTextField();
		authTextBox.setBounds(239, 554, 86, 20);
		trackInfoPanel.add(authTextBox);
		authTextBox.setColumns(10);
		
		trackInfoPanel.revalidate();
		trackInfoPanel.repaint();
	}
}
