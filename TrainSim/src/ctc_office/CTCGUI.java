package ctc_office;

import javax.swing.JFrame;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.SpringLayout;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

import system_wrapper.SystemWrapper;
import track_model.TrackBlock;
import track_model.TrackCrossing;
import track_model.TrackStation;
import track_model.TrackSwitch;
import javax.swing.JLabel;
import java.awt.Color;
import javax.swing.ScrollPaneConstants;
import java.awt.BorderLayout;
import javax.swing.border.EmptyBorder;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.FlowLayout;
import javax.swing.JComboBox;

public class CTCGUI extends JFrame{
	private static final long serialVersionUID = 1L;
	private JTable trainTable;
	private JTable trackTable;
	private DefaultTableModel trainTableModel;
	private DefaultTableModel trackTableModel;
	private final HashMap<String, TrackLayout> trackLayouts = SystemWrapper.ctcOffice.getAllTrackLayouts();
	private ArrayList<Train> allTrains = null;;
	private ArrayList<DefaultBlock> allBlocks = null;;
	private String currLine = "Green";
	private JPanel trackInfoPanel;
	
	public CTCGUI() {

        String[] lines = {"Green", "Red"};
		// begin autogenerated code
		SpringLayout springLayout = new SpringLayout();
		getContentPane().setLayout(springLayout);
		
		JPanel trainTablePanel = new JPanel();
		trainTablePanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		springLayout.putConstraint(SpringLayout.NORTH, trainTablePanel, 0, SpringLayout.NORTH, getContentPane());
		springLayout.putConstraint(SpringLayout.WEST, trainTablePanel, 0, SpringLayout.WEST, getContentPane());
		springLayout.putConstraint(SpringLayout.SOUTH, trainTablePanel, 213, SpringLayout.NORTH, getContentPane());
		springLayout.putConstraint(SpringLayout.EAST, trainTablePanel, 661, SpringLayout.WEST, getContentPane());
		getContentPane().add(trainTablePanel);
		
		JPanel TrackLayoutPanel = new JPanel();
		springLayout.putConstraint(SpringLayout.NORTH, TrackLayoutPanel, 0, SpringLayout.SOUTH, trainTablePanel);
		springLayout.putConstraint(SpringLayout.WEST, TrackLayoutPanel, 0, SpringLayout.WEST, getContentPane());
		springLayout.putConstraint(SpringLayout.SOUTH, TrackLayoutPanel, -248, SpringLayout.SOUTH, getContentPane());
		springLayout.putConstraint(SpringLayout.EAST, TrackLayoutPanel, 0, SpringLayout.EAST, trainTablePanel);
		TrackLayoutPanel.setBorder(new EmptyBorder(0, 0, 0, 0));
		TrackLayoutPanel.setBackground(Color.WHITE);
		getContentPane().add(TrackLayoutPanel);
		
		JLabel todoLable = new JLabel("TODO: the track layout will be displayed here in the form of a graph.");
		TrackLayoutPanel.add(todoLable);
		
		JScrollPane TrackLayoutScrollPane = new JScrollPane();
		TrackLayoutPanel.add(TrackLayoutScrollPane);
		
		JPanel TrackTablePanel = new JPanel();
		springLayout.putConstraint(SpringLayout.NORTH, TrackTablePanel, 0, SpringLayout.SOUTH, TrackLayoutPanel);
		springLayout.putConstraint(SpringLayout.SOUTH, TrackTablePanel, 0, SpringLayout.SOUTH, getContentPane());
		TrackTablePanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		springLayout.putConstraint(SpringLayout.WEST, TrackTablePanel, 0, SpringLayout.WEST, getContentPane());
		springLayout.putConstraint(SpringLayout.EAST, TrackTablePanel, 0, SpringLayout.EAST, trainTablePanel);
		getContentPane().add(TrackTablePanel);
		
		trackTable = new JTable();
		trackTable.setRowSelectionAllowed(false);
		trackTableModel = new DefaultTableModel(
				new Object[][] {
						{"Block Number", "Block Length", "Speed Limit (MPH)", "Block Type", "Occupied Status", "Broken"},
					},
					new String[] {
						"Block Number", "Block Length", "Speed Limit (MPH)", "Block Type", "Occupied Status", "Broken"
					}
				) {
					Class[] columnTypes = new Class[] {
						String.class, String.class, String.class, String.class, String.class, String.class
					};
					public Class getColumnClass(int columnIndex) {
						return columnTypes[columnIndex];
					}
				};
		trackTable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"Block Number", "Block Length", "Speed Limit (MPH)", "Block Type", "Occupied Status", "Broken"
			}
		) {
			Class[] columnTypes = new Class[] {
				String.class, String.class, String.class, String.class, String.class, String.class
			};
			public Class getColumnClass(int columnIndex) {
				return columnTypes[columnIndex];
			}
		});
		trackTable.getColumnModel().getColumn(2).setPreferredWidth(107);
		TrackTablePanel.setLayout(new BorderLayout(0, 0));
		TrackTablePanel.add(trackTable);
		
		JScrollPane trackTableScrollPane = new JScrollPane(trackTable);
		trackTableScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		TrackTablePanel.add(trackTableScrollPane);
		
		trackInfoPanel = new JPanel();
		springLayout.putConstraint(SpringLayout.WEST, trackInfoPanel, 0, SpringLayout.EAST, trainTablePanel);
		springLayout.putConstraint(SpringLayout.SOUTH, trackInfoPanel, 0, SpringLayout.SOUTH, getContentPane());
		springLayout.putConstraint(SpringLayout.EAST, trackInfoPanel, 0, SpringLayout.EAST, getContentPane());
		trackInfoPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		trainTableModel = new DefaultTableModel(
				new Object[][] {
						{"Train Name", "Train ID", "Current Block", "Destination Block", "Speed (MPH)", "Authority (yards)"},
					},
					new String[] {
						"Train Name", "Train ID", "Current Block", "Destination Block", "Speed (MPH)", "Authority (yards)"
					}
				) {
					Class[] columnTypes = new Class[] {
						String.class, String.class, String.class, String.class, String.class, String.class
					};
					public Class getColumnClass(int columnIndex) {
						return columnTypes[columnIndex];
					}
				};
		
		trainTable = new JTable();
		trainTable.setRowSelectionAllowed(false);
		trainTable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"Train Name", "Train ID", "Current Block", "Destination Block", "Speed (MPH)", "Authority (yards)"
			}
		) {
			Class[] columnTypes = new Class[] {
				String.class, String.class, String.class, String.class, String.class, String.class
			};
			public Class getColumnClass(int columnIndex) {
				return columnTypes[columnIndex];
			}
		});
		trainTable.getColumnModel().getColumn(3).setPreferredWidth(91);
		trainTable.getColumnModel().getColumn(5).setPreferredWidth(102);
		trainTablePanel.setLayout(new BorderLayout(0, 0));
		trainTablePanel.add(trainTable);
		
		JScrollPane trainTableScrollPane = new JScrollPane(trainTable);
		trainTableScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		trainTablePanel.add(trainTableScrollPane);
		getContentPane().add(trackInfoPanel);
		GridBagLayout gbl_trackInfoPanel = new GridBagLayout();
		gbl_trackInfoPanel.columnWidths = new int[]{0};
		gbl_trackInfoPanel.rowHeights = new int[]{0};
		gbl_trackInfoPanel.columnWeights = new double[]{Double.MIN_VALUE};
		gbl_trackInfoPanel.rowWeights = new double[]{Double.MIN_VALUE};
		trackInfoPanel.setLayout(gbl_trackInfoPanel);
		
		JPanel panel = new JPanel();
		springLayout.putConstraint(SpringLayout.NORTH, trackInfoPanel, 2, SpringLayout.SOUTH, panel);
		springLayout.putConstraint(SpringLayout.SOUTH, panel, 60, SpringLayout.NORTH, getContentPane());
		springLayout.putConstraint(SpringLayout.NORTH, panel, 0, SpringLayout.NORTH, getContentPane());
		springLayout.putConstraint(SpringLayout.WEST, panel, 0, SpringLayout.EAST, trainTablePanel);
		springLayout.putConstraint(SpringLayout.EAST, panel, 0, SpringLayout.EAST, getContentPane());
		panel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		getContentPane().add(panel);
		panel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		
		JLabel lblLine = new JLabel("Line");
		panel.add(lblLine);
		
		JComboBox lineSelector = new JComboBox();
		panel.add(lineSelector);
		// end autogenerated code

		// Refreshes the tables and layout
		final Timer timer = new Timer(SystemWrapper.simClock.getDeltaMs() * 100, new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent e) {
            	updateTrackTable();
            	updateTrainTable();
            }
        });
        timer.start();

        // Gets row of trackTable that was clicked
        trackTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = trackTable.rowAtPoint(evt.getPoint());
                int col = trackTable.columnAtPoint(evt.getPoint());
                if (row >= 0 && col >= 0) {
                	allBlocks.get(row-1);
                    trackBlockSelected();
                }
            }
        });

        // Gets row of trainTable that was clicked
        trainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = trainTable.rowAtPoint(evt.getPoint());
                int col = trainTable.columnAtPoint(evt.getPoint());
                if (row >= 0 && col >= 0) {
                	allTrains.get(row-1);
                    trainSelected();
                }
            }
        });
        
        // detect changes to the line
        lineSelector.addActionListener (new ActionListener () {
            public void actionPerformed(ActionEvent e) {
            	String selected = String.valueOf(lineSelector.getSelectedItem().toString());
            	if (!selected.equals(currLine)) {
            		currLine = selected;
                    //clear the info panel
            		trackInfoPanel.removeAll();
            		trackInfoPanel.revalidate();
            		trackInfoPanel.repaint();
            	}
            }
        });
	}
	private void updateTrackTable() {
    	TrackLayout tLayout = trackLayouts.get(currLine);
    	int trackRowCount = trackTableModel.getRowCount();
    	
    	// remove all but the first row from trackTable
    	for (int i = 0; i < trackRowCount; i++) {
    		trackTableModel.removeRow(i);
    	}

    	
    	// get the list of all the blocks
    	allBlocks = tLayout.getAllBlocks();
    	// Update the table with the new info
    	for (DefaultBlock b : allBlocks) {
    		String blockType;
    		String occupied = "Unoccopied";
    		if (b.occupied) {
    			occupied = "Occupied";
    		}
    		if (b.getClass().equals(TrackBlock.class)) {
    			blockType = "Default";
    		}
    		else if (b.getClass().equals(TrackCrossing.class)){
    			blockType = "Railway Crossing";
	        }
	        else if (b.getClass().equals(TrackSwitch.class)){
    			blockType = "Switch";
	        }
            else if (b.getClass().equals(TrackStation.class)){
    			blockType = "Station";
            }
            else { // it is the yard
    			blockType = "Yard";
            }

    		trackTableModel.addRow(new Object[] {b.blockNumber, b.blockLength, b.speedLimit, blockType, occupied, b.broken});
    	}
    	trackTable.revalidate();
		trackTable.repaint();
	}
	
	private void updateTrainTable() {
    	TrackLayout tLayout = trackLayouts.get(currLine);
    	int trainRowCount = trainTableModel.getRowCount();

    	// remove all but the first row from trainTable
    	for (int i = 0; i < trainRowCount; i++) {
    		trainTableModel.removeRow(i);
    	}

    	// get the complete list of trains
    	allTrains = tLayout.getAllTrains();
    	// Update the table with the new info
    	for (Train t : allTrains) {
    		trainTableModel.addRow(new Object[] {});
    	}

    	trainTable.revalidate();
		trainTable.repaint();
	}
	
	private void trackBlockSelected() {
		// determine the block type
		// display appropriate options for each block type
		trackInfoPanel.revalidate();
		trackInfoPanel.repaint();
	}
	
	private void trainSelected() {
		// If train is manually dispatched display button that allows for train routing
		trackInfoPanel.revalidate();
		trackInfoPanel.repaint();
	}
}
